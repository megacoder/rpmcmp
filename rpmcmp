#!/usr/bin/python
# vim: ts=4 sw=4 noet nu

import os
import sys
import getopt
import operator

class PackageCompare:
	def __init__(self):
		self.packages	 = {}
		self.files		 = []
		self.max_rpmname = 0
		self.wrong		 = False
		return

	def	do_file( self, f = sys.stdin, name = '{stdin}' ):
		if len(name) < 2:
			name = ' ' + name
		self.files.append( name )
		for line in f:
			tokens = line.strip().split()
			if len(tokens) > 0:
				rpm = tokens[0]
				try:
					self.packages[rpm].append( name )
				except:
					self.packages[rpm] = [ name ]
				self.max_rpmname = max( self.max_rpmname, len(rpm) )
		return

	def	_name_compactor( self ):
		self.shorter = {}
		prefix = os.path.commonprefix( self.files )
		# Limit prefix to a directory string
		slash = prefix.find( '/' )
		if slash > -1:
			prefix = prefix[:slash+1]
		# Make shortened name translations
		k = len(prefix)
		for file in self.files:
			self.shorter[file] = file[k:]
		return

	def	report( self ):
		self.files.sort()
		self._name_compactor()
		keys = self.packages.keys()
		keys.sort()
		if len(keys) == 0:
			# No RPM packages seen, not good
			self.wrong = True
			return
		# Print title
		fmt = '%%-%ds' % self.max_rpmname
		title = fmt % 'Package Name'
		for fn in self.files:
			sfn = self.shorter[fn]
			fmt = ' %%-%ds' % max( 2, len(sfn) )
			title += (fmt % sfn)
		print title
		# Print colum headers
		fmt = '%%-%ds' % self.max_rpmname
		bars = fmt % ('-' * self.max_rpmname)
		for fn in self.files:
			sfn = self.shorter[fn]
			lsfn = max( 2, len(sfn) )
			fmt = ' %%-%ds' % lsfn
			bars += (' ' + '-'*lsfn)
		print bars
		# Go!
		for package in keys:
			line = ''
			fmt = '%%-%ds' % self.max_rpmname
			line += (fmt % package)
			content = sorted(self.packages[package])
			Ncontent = len(content)
			i = 0
			for fn in self.files:
				if (i < Ncontent) and (fn == content[i]):
					check = 'X'
					i += 1
				else:
					check = ' '
					self.wrong = True
				n = len(self.shorter[fn])
				mark = ' ' + (' ' * int((n/2)+0.5)) + check
				fmt = ' %%-%ds' % n
				line += fmt % mark
			print line
		return

	def	status( self ):
		return 1 if self.wrong else 0

if __name__ == "__main__":
	pc = PackageCompare()
	if len(sys.argv) == 1:
		pc.do_file()
	else:
		for fn in sys.argv[1:]:
			try:
				f = open( fn )
			except:
				print >>sys.stderr, '%s: cannot open "%s" for reading.' % fn
				continue
			pc.do_file( f, fn )
			f.close()
	pc.report()
	sys.exit(pc.status())
